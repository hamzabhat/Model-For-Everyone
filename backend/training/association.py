"""
association.py

This module defines functions for association rule learning using the Apriori algorithm from the "apyori" library.
It returns the generated association rules along with some basic metrics.

Requirements:
    pip install apyori
"""

from apyori import apriori


def train_association_model(model_name, transactions, user_hyperparams):
    """
    Trains an association learning model using the Apriori algorithm.

    Parameters:
      model_name (str): Currently must be "apriori".
      transactions (list of lists): The dataset where each inner list is a transaction containing items.
      user_hyperparams (dict): Hyperparameters including:
          - min_support (float): Minimum support threshold.
          - min_confidence (float): Minimum confidence threshold.
          - min_lift (float): Minimum lift threshold.
          - min_length (int): Minimum length of the itemsets (default 2).

    Returns:
      rules (list): A list of association rules generated by apyori.
      metrics (dict): A dictionary with metrics such as the number of rules generated.
    """
    if model_name.lower() != "apriori":
        raise ValueError("Currently, only the 'apriori' algorithm is supported for association learning.")

    # Set default hyperparameters
    default_hyperparams = {
        "min_support": 0.1,
        "min_confidence": 0.5,
        "min_lift": 1.0,
        "min_length": 2
    }
    default_hyperparams.update(user_hyperparams)

    # Run the apriori algorithm using the provided hyperparameters.
    rules = list(apriori(
        transactions,
        min_support=default_hyperparams["min_support"],
        min_confidence=default_hyperparams["min_confidence"],
        min_lift=default_hyperparams["min_lift"],
        min_length=default_hyperparams["min_length"]
    ))

    # Create basic metrics (e.g., number of rules generated)
    metrics = {"num_rules": len(rules)}
    return rules, metrics


# --------------------- Example Usage --------------------- #
if __name__ == "__main__":
    # Example transactions: each inner list is a transaction with items.
    transactions = [
        ['Milk', 'Bread', 'Eggs'],
        ['Bread', 'Eggs'],
        ['Milk', 'Eggs'],
        ['Milk', 'Bread']
    ]
    user_hyperparams = {
        "min_support": 0.5,
        "min_confidence": 0.7,
        "min_lift": 1.0,
        "min_length": 2
    }
    rules, metrics = train_association_model("apriori", transactions, user_hyperparams)
    print("Association Learning Metrics:", metrics)
    for rule in rules:
        print(rule)
